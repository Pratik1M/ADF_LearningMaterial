{
	"name": "dataflow_structured_to_analytics",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_structured_orders",
						"type": "DatasetReference"
					},
					"name": "sourceorders"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_products",
						"type": "DatasetReference"
					},
					"name": "sourceproducts"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_stores",
						"type": "DatasetReference"
					},
					"name": "sourcestores"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_analytics_products_orders_monthly",
						"type": "DatasetReference"
					},
					"name": "sinkprodordmonthly"
				},
				{
					"dataset": {
						"referenceName": "ds_analytics_stores_orders_monthly",
						"type": "DatasetReference"
					},
					"name": "sinkstoresmonthly"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select2"
				},
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "aggregate2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATE as date,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer,",
				"          SUBTOTAL as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sourceorders",
				"source(output(",
				"          PRODUCT_ID as short,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sourceproducts",
				"source(output(",
				"          STORE_ID as short,",
				"          STORE_NAME as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sourcestores",
				"sourceorders, sourceproducts join(sourceorders@PRODUCT_ID == sourceproducts@PRODUCT_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          PRODUCT_NAME,",
				"          ORDER_DATE,",
				"          ORDER_STATUS,",
				"          SUBTOTAL",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(ORDER_STATUS != 'CANCELLED') ~> filter1",
				"derivedColumn1 aggregate(groupBy(PRODUCT_NAME,",
				"          ORDER_DATE,",
				"          ORDER_STATUS),",
				"     TOTAL_AMOUNT = toDecimal(sum(SUBTOTAL))) ~> aggregate1",
				"filter1 derive(ORDER_DATE = toString(ORDER_DATE, 'MM-yyyy')) ~> derivedColumn1",
				"sourcestores, sourceorders join(sourcestores@STORE_ID == sourceorders@STORE_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          STORE_NAME,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          ORDER_STATUS,",
				"          ORDER_DATE,",
				"          SUBTOTAL",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 filter(ORDER_STATUS != 'CANCELLED') ~> filter2",
				"filter2 derive(ORDER_DATE = toString(ORDER_DATE, 'MM-yyyy')) ~> derivedColumn2",
				"derivedColumn2 aggregate(groupBy(STORE_NAME,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          ORDER_STATUS,",
				"          ORDER_DATE),",
				"     TOTAL_AMOUNT = toDecimal(sum(SUBTOTAL))) ~> aggregate2",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['products_orders_monthly.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkprodordmonthly",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['stores_orders_monthly.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkstoresmonthly"
			]
		}
	}
}