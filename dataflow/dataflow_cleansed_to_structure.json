{
	"name": "dataflow_cleansed_to_structure",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_cleansed_orders",
						"type": "DatasetReference"
					},
					"name": "sourceorders"
				},
				{
					"dataset": {
						"referenceName": "ds_orderitems_to_cleansed",
						"type": "DatasetReference"
					},
					"name": "sourceorderitems"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_Stores",
						"type": "DatasetReference"
					},
					"name": "sourcestores"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_Products",
						"type": "DatasetReference"
					},
					"name": "sourceproducts"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_structured_orders",
						"type": "DatasetReference"
					},
					"name": "sinkOrders"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_stores",
						"type": "DatasetReference"
					},
					"name": "sinkstores"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_products",
						"type": "DatasetReference"
					},
					"name": "sinkproducts"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_Orders_sql",
						"type": "DatasetReference"
					},
					"name": "sinksql"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_Stores_sql",
						"type": "DatasetReference"
					},
					"name": "sinkstoressql"
				},
				{
					"dataset": {
						"referenceName": "ds_structured_Products_sql",
						"type": "DatasetReference"
					},
					"name": "sinkproductssql"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select4"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "AlterRow2"
				},
				{
					"name": "AlterRow3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ORDER_ID as integer,",
				"          ORDER_DATE as date,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sourceorders",
				"source(output(",
				"          ORDER_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sourceorderitems",
				"source(output(",
				"          STORE_ID as short,",
				"          STORE_NAME as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sourcestores",
				"source(output(",
				"          PRODUCT_ID as short,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sourceproducts",
				"sourceorders, sourceorderitems join(sourceorders@ORDER_ID == sourceorderitems@ORDER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(SUBTOTAL = multiply(UNIT_PRICE, QUANTITY),",
				"          UPDATED_TIMESTAMP = currentUTC(),",
				"          ORDER_ITEM_ID = toInteger(concat(toString(sourceorders@ORDER_ID),toString(PRODUCT_ID)))) ~> derivedColumn1",
				"sourcestores select(mapColumn(",
				"          STORE_ID,",
				"          STORE_NAME,",
				"          LATITUDE,",
				"          LONGITUDE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(UPDATED_TIMESTAMP = currentUTC()) ~> derivedColumn2",
				"sourceproducts select(mapColumn(",
				"          PRODUCT_ID,",
				"          PRODUCT_NAME,",
				"          UNIT_PRICE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 derive(UPDATED_TIMESTAMP = currentUTC()) ~> derivedColumn3",
				"derivedColumn1 select(mapColumn(",
				"          ORDER_ITEM_ID,",
				"          ORDER_ID = sourceorders@ORDER_ID,",
				"          ORDER_DATE,",
				"          CUSTOMER_ID,",
				"          ORDER_STATUS,",
				"          STORE_ID,",
				"          UPDATED_TIMESTAMP,",
				"          PRODUCT_ID,",
				"          UNIT_PRICE,",
				"          QUANTITY,",
				"          SUBTOTAL",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 alterRow(upsertIf(true())) ~> AlterRow1",
				"derivedColumn2 alterRow(upsertIf(true())) ~> AlterRow2",
				"derivedColumn3 alterRow(upsertIf(true())) ~> AlterRow3",
				"select4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          ORDER_DATE",
				"     )) ~> sinkOrders",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['stores.parquet'],",
				"     umask: 0222,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkstores",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['products.parquet'],",
				"     umask: 0222,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkproducts",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ORDER_ITEM_ID as integer,",
				"          ORDER_ID as integer,",
				"          ORDER_DATE as date,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as decimal(18,0),",
				"          QUANTITY as integer,",
				"          SUBTOTAL as decimal(18,0),",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ORDER_ITEM_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1)) ~> sinksql",
				"AlterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          LATITUDE as decimal(18,0),",
				"          LONGITUDE as decimal(18,0),",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['STORE_ID'],",
				"     format: 'table',",
				"     preSQLs:['TRUNCATE TABLE  [ORDERS].[STORES]'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1)) ~> sinkstoressql",
				"AlterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as decimal(18,0),",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['PRODUCT_ID'],",
				"     format: 'table',",
				"     preSQLs:['TRUNCATE TABLE  [ORDERS].[PRODUCTS]'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1)) ~> sinkproductssql"
			]
		}
	}
}